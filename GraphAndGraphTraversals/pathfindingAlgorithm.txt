Introduction to Pathfinding

Learn about the role of pathfinding in programming.

Imagine you’re trying to return a book before the library closes for the day. You need to get from your home to the library as quickly as possible so you don’t get 
hit with a late fee. You know of three paths to get to the library: one is a 2-mile walk, another is 1.5-miles, and the third one is 1-mile. With time being of the 
essence, you choose the shortest path and are able to return the book.

In computer science, we can run into a similar situation of needing to find the shortest distance between two points. In this article, we’ll discover more about the 
role of pathfinding in computer science.
What is Pathfinding?

Pathfinding is the algorithmic concept of finding the shortest path between point A and point B on a graph. We can find pathfinding algorithms implemented in many 
location-based applications.

One example of pathfinding in the real-world is GPS software! When using a GPS for getting directions, the software is given two points: a starting location and 
an ending location. Then, the program calculates the shortest viable route for the user to take in order to get to their destination.

Pathfinding is also used in video games with grid-based terrains. Think of a game where your character is being chased by an enemy NPC. A pathfinding algorithm 
is used to find the quickest path from the NPC’s location to your character’s location.
Types of Pathfinding Algorithms

There are two different types of pathfinding techniques that are covered in this course: Dijkstra’s algorithm and A* algorithm.

Using a dictionary and a min-heap, Dijkstra’s algorithm finds the shortest path by calculating the distance between a starting vertex and every other vertex 
in a graph and keeping track of the path with the smallest distance.

The A* algorithm is a modification of Dijkstra’s algorithm. A* works by having both a starting vertex and a target vertex. The algorithm computes an estimated 
distance, or heuristic, for all possible paths between the starting vertex and the goal vertex and then selects the shortest one.
Wrap Up

Nice job reaching the end of this article. Let’s review what we learned:

    Pathfinding is the algorithmic concept of finding the shortest path between two points in a graph.
    Two types of pathfinding techniques covered in this course are Djikstra’s algorithm and A* algorithm.









A* Algorithm: Conceptual
Dijkstra's Isn't Always the Best...
2 min

Dijkstra’s
Preview: Docs An algorithm is a formal process used to solve a problem. They can be represented in several formats but are usually represented in pseudocode in 
order to communicate the process by which the algorithms solve the problems they were created to tackle.
algorithm
is great for finding the shortest distance from a start vertex to all other vertices in the graph. However, it is not the best when we are just looking for 
the shortest distance from a single start vertex to a single end vertex. Let’s think about this.

Dijkstra’s algorithm considers ALL neighboring vertices and simply pops the vertex with the shortest distance calculated so far from the queue. 
As a refresher, here’s the
Preview: Docs Pseudocode is a method of describing the steps in an algorithm or other computed process written in plain language. It does not rely 
on any particular implementation of a programming language, and instead is intended for a human audience. It omits the portions required for machine 
implementation of the algorithm, such as variable declarations, and includes natural language description details.
pseudocode
for Dijkstra’s Algorithm:

create dictionary to map vertices to their distance from start vertex

assign start vertex a distance of 0 in min heap

assign every other vertex a distance of infinity in min heap

remove the vertex with the minimum distance from the min heap and set it to the current vertex

while min heap is not empty:
  for each current vertex:
    for each neighbor in neighbors:
    new distance = (distance to current vertex) + (edge weight of current vertex to neighbor)

    if new distance is less than its current distance:
      current distance = new distance

return distances

However, considering vertices that take us away from our goal might be a waste of time. For instance, take a look at the graph on the left.

What if we modeled all the train stations in North America using a graph and we were looking for the shortest train distance from New York to Los Angeles?

We shouldn’t consider train stations in Canada because it would be inefficient to look in that direction. However, as shown in the graph on the left, 
Dijkstra’s looks in all directions, and the algorithm will check all neighboring stations.

Luckily, there are modifications we can make to Dijkstra’s Algorithm. Let’s see how we can optimize it!







What is A*?
8 min

Rather than simply checking the distance up to the current vertex, we will check the distance up to the current vertex + the estimated distance 
from the current vertex to the end vertex. We call this estimated distance the heuristic. For instance, in a graph where the vertices are cities, 
and the edges are roads, we can estimate the distance between two cities through a distance formula:

d=(x1−x2)2+(y1−y2)2d=(x1​−x2​)2+(y1​−y2​)2

​

There are only a few important changes you will need to make to Dijkstra’s
Preview: Docs An algorithm is a formal process used to solve a problem. They can be represented in several formats but are usually represented 
in pseudocode in order to communicate the process by which the algorithms solve the problems they were created to tackle.
algorithm
to turn it into a star of an algorithm:

    Add a target for the search. The new algorithm cannot optimize with a heuristic unless it has a clear destination.
    Gather possible optimal paths and identify a single shortest path. You want to find a path that has the shortest distance for the least cost.
    Implement a heuristic that determines the likely distance remaining. The main difference between Dijkstra’s and this new algorithm is that this 
    one knows which direction to head in.

This new algorithm is called A*. It’s sometimes referred to as a greedy algorithm because it makes a locally optimal choice at every vertex. 
The heuristic that A* uses makes it an introductory example of artificial intelligence!

In fact, going back to our train example. With A*, the search would be visualized as the following:





Runtime of A*
2 min

In A*, we have a goal vertex. Thus, the algorithm is optimized such that in most graphs, every vertex will NOT be searched, so let’s 
think about how fast this algorithm runs.

Take a look at the graph.

Let’s say A is the start vertex and G is the end vertex. Through A*, we will not be searching many of the vertices left of A, so describing 
the runtime as the same as Dijkstra’s is not very descriptive. Remember that Dijkstra’s has a runtime of O((V+E) log V) because in the worst 
case you search every vertex and go through all the edges while storing data in a min-heap.

For A*, let’s try describing the runtime in better terms. Using the above graph, let’s call b the branching factor of the graph. 
The branching factor is the average number of edges per vertex in the graph. In this case, on average, every vertex has 2 edges, 
and thus, the branching factor is equal to 2. Let’s call d the depth of the goal vertex from the start vertex. Because the goal 
vertex is 3 edges away from the start vertex, d is equal to 3.

In the worst case, we would look at all of the edges in the direction of the goal vertex until we reach the goal vertex. 
We would look at b edges for every vertex in our search for close to d iterations. Thus, the runtime is O(bd).




Review of A*
1 min

    The A* algorithm is a greedy graph search algorithm that optimizes looking for a target vertex.
    A* is a modification of Dijkstra’s done by adding the estimated distance of each vertex to the goal vertex when searching.
    We can modify Dijkstra’s and turn it into A* by changing the following:
    Adding a target for the search.
    Gathering possible optimal paths and identify a single shortest path.
    Implementing a heuristic that determines the likely distance remaining.
    The runtime of A* is O(bd) where b is the branching factor of the graph and d is the depth of the goal vertex from the start vertex.
    A* is an introductory glimpse into artificial intelligence.

