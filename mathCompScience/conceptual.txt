Why Discrete Math

Why study discrete math?
Introduction

Discrete mathematics is the study of mathematical structures that are distinct and separable; i.e. structures that are “discrete.” The branches of mathematics that this 
field is comprised of are very useful in computer science. Before the invention of the computer, mathematicians focused their efforts on developing the branches of 
continuous mathematics as it is better suited to quantify properties that arise from the study of physical sciences (such as physics, chemistry, etc…) which was the 
main focus of early scientists. While the concepts of discrete math were developed by some of the earlier mathematicians in recorded history, they found very little 
application before the invention of the computer and the development of the field of computer science. Branches of discrete math that are most important to computer 
science include:

    logic and proofs
    sets and set theory
    recursion and recurrence relations
    number theory
    combinatorics





The Need for Proofs

Computers are good at implementing algorithms that would be too tedious or error-prone for a human to do manually as they could do them for an extended period without 
getting bored or making mistakes. An algorithm is simply a series of instructions that are repeatedly executed until a certain task is complete. When you follow the 
recipe to prepare your favorite dish, you are following an algorithm. When designing an algorithm, we do need to prove that it is correct. It is not possible to test an 
algorithm by manually computing it and using that to verify the computer’s results. One of the most powerful proof methods to conduct is called a proof by induction in 
which an algorithm is verified by proving that it is valid for some base case and then proving that it also works for the base case’s immediate successor which is known 
as the inductive step. This proof technique is analogous to the toppling of dominos; when the first domino falls over (the base case) it will knock over the next domino 
(inductive step) which will continue to knock over a potentially infinite amount of succeeding dominos.





Set Theory

Another important branch of discrete math is set theory. Set theory is the study of collections of discrete objects (known as a set), their properties, as well as the 
mathematical operations that can be performed on them. This is crucial to the field of computer science because it presents a formal way of dealing with collections. 
Common topics in set theory are:

    set construction
    counting techniques
    set combinations
    set exclusions.

This field also has major applications in probability theory.




Number Theory

As the entire world rushes to connect everything to the internet, online security becomes a major concern. To protect everyone and their data from bad actors on the 
internet, advancements in cryptography have been made. Cryptography is a branch of computer science that is primarily concerned with the study of algorithms that are 
used to secure data. A majority of the security algorithms employ ideas from number theory, the study of properties and relations of numbers. A particularly important 
and useful subject is that of congruence. We say two numbers are congruent if they yield the same remainder when divided by some number n. This has many useful 
applications in cryptography and beyond.
Sequences and Series

A series of numbers can be used to express many things ranging from how to arrange books on a shelf to an attempt to model the population of rabbits in a forest. 
The study of how to arrange a sequence is explored in the branches of combinatorics and recurrence relations. Combinatorics is a branch of mathematics that studies 
methods of how to compute the number of ways things can be arranged while considering the order of arrangement matters or not. If a number in a sequence can be expressed 
in terms of earlier numbers, it is known as a recurrence relation. The subject of recurrence relations (implemented as recursive functions on a computer) explores how to 
define a recurrence relation as well as how to solve one. A common application of this field is computing the number of ways to do something in terms of the number of ways 
to do it for a smaller number (ex: how to climb n stairs by climbing one or two steps at a time).





Binary: a Number System for Computers

The traditional number system everyone is familiar with was invented by Hindu mathematicians many centuries ago. This base-10 number system is known as the decimal number 
system as every possible number in this system is composed using only ten digits. It is theorized that this number system was invented because humans have 10 fingers they 
can use to count. However, computers are essentially billions of tiny circuits configured to behave like switches. A switch can exist in only one of two discrete states. 
A switch is either “on” (represented by a 1) or “off” (represented by a 0) suggesting that computers only have two “fingers” they can use to count; therefore, for a 
computer, it is better to express numbers using a base-2 number system. This system is known as the binary number system.







Skip to Content
My Home
Discrete Math Glossary

Review key terms and their definitions from the Discrete Math course.


Binary and Bases

Boolean Values: A data type with two possible values, 0 and 1, often representing True/False data in computation
Congruences

a divides b: A property on two integers a and b that holds if there exists an integer k for which a*k = b.

a is congruent to b mod n: A property on three integers a, b, and n, where n > 0, such that n divides a - b.

Caesar cipher: A cipher that takes a given phrase or string of letters and shifts each one three places down the alphabet.

Function: A relation such that each input x has at most one corresponding output y.

Linear Congruence: Congruence relationship where the unknown variable is contained in a linear expression.

Linear Expression: Expression in the form ax + b, where a and b are constants and x is our unknown variable.

mod: Short-hand for modulus.

Modular Arithmetic: The operation that returns the remainder of b/a for two numbers a and b.

Modulus: The operator used to perform modular arithmetic.

Reflexive Property for Congruences: For two numbers a and n, n > 0, a is congruent to a mod n.

Symmetric Property for Congruences: For three numbers a, b, and n, n > 0, if a is congruent to b mod n, then b is congruent to a mod n.

Transitive Property for Congruences: For the integers a, b, c, and n, n > 0, if a is congruent to b mod n and b is congruent to c mod n, then a is congruent to c mod n.

x relates to y: A relationship where a given input x has a corresponding output y.





Counting Theory

Bit string (or) bitstring: A sequence of bits (0 or 1).

Hockey stick pattern: When you descend Pascal’s triangle diagonally at first, then slant to form the shape of a hockey stick, the number in the slanted portion is the sum of the numbers that descended diagonally.

Pascal’s Triangle: To build the triangle, start with a ‘1’ at the top, then continue placing numbers below it in a triangular pattern. Each number is the sum of the numbers directly above it.

Principle of Inclusion and Exclusion (PIE): For two sets A and B, |A ∪ B| = |A| + |B| − |A ⋂ B|.

Product Rule: If there are n(P) ways to do P and n(Q) independent ways to do Q, then the number of ways to do P and Q is n(P) * n(Q).

Sum Rule: If there are n(P) ways to do P and, distinct from them, n(Q) ways to do Q, then the number of ways to do P or Q is n(P) + n(Q).
Induction and Strong Induction

Base Case(s): The smallest possible case(s) for which a given statement is true.

Conjecture: Mathematical term with the same meaning as a statement.

Induction: A method of proof that is often used to prove statements with summations or recursions.

Induction Hypothesis (for Mathematical Induction): The supposition that a given statement is true for some integer k exceeding the base case.

Induction Hypothesis (for Strong Induction): The supposition that a given statement is true for all integers between the largest base case and some integer k exceeding that largest base case.

Induction Proof: A mathematical proof that uses induction.

Inductive Step: The process of constructing and proving the induction hypothesis.

Mathematical Induction: An induction technique that proves a statement by providing one base case, assuming the statement is true for some larger integer k, then proving the statement is true for k+1 using said assumption (induction hypothesis).

Mathematical Proof: A mathematical explanation for why a given statement is either true or false.

Nonnegative integer: An integer n such that n >= 0.

Strong Induction: An induction technique that proves a statement by providing more than one base case, assuming the statement is true for all integers from the largest base case to some even larger integer k, and then proving the statement is true for k+1 using that assumption (induction hypothesis).

Summation: Operation (denoted by the Greek letter capital Sigma) that adds consecutive terms together.
Permutations and Combinations

Combination: An arrangement, or selection, in which the order does not matter.

Enumeration: The number of ways to select from, or arrange, a set of n objects.

Permutation: An arrangement, or selection, in which the order matters.





Recurrence Relations

Boundary condition: The starting value for a recurrence relation. In a sequence, this is the first number.

Characteristic equation: A polynomial equation derived from a linear recurrence relation the roots of which raised to nth power constitute the closed-form solution.

Closed-form solution (for recurrence relations): A mathematical function, f(n), that computes the nth term of a sequence described by a recurrence relation.

Coefficient: multiplier that comes before a variable.

Dynamic Programming: A technique in which values are cached to be used for future computations.

Homogeneous linear recurrence relation: A linear recurrence relation that has no explicit dependence on n.

Homogeneous solution: The part of the closed-form solution to an inhomogeneous recurrence relation obtained by ignoring the f(n) term.

Inhomogeneous linear recurrence relation: A linear recurrence relation that contains a dependence on n; i.e., a recurrence relation that contains an f(n) term.

Initial condition: Same as boundary condition. This and “boundary condition” are used interchangeably.

Linear recurrence relation: A recurrence relation in which there is a linear dependence on previous values.

Multiplicity of a root: The number of times a root appears in the solution of a characteristic equation.

Non-linear recurrence relation: A recurrence relation in which there is a non-linear dependence on previous values.

Particular solution: The part of the closed-form solution to an inhomogeneous recurrence relation that assumes a solution must be of the same form as f(n).

Recursive function, recurrence relation: A function that computes a value by making a call to itself.

Fibonacci sequence: A sequence that starts with 0 and 1, with each next term being a sum of the terms before it.




Sequences and Summations

Closed Form Solution (for Sequences and Summations): A mathematical expression expressed using a finite number of standard operations, instead of an infinite 
summation/sequence.

Finite sequence: A sequence of numbers that eventually comes to an end.

Infinite sequence: A sequence of numbers that never comes to end (continues infinitely).

Natural Root (e): It is the base of the natural logarithm, approximately equal to 2.71828.
Sets and Set Operations

Cardinality of a set: It is the number of elements in the set.

Complement of a set: The set of all elements in the universal set U that are not in this set.

Dataset: A collection of numbers or values that relate to a particular subject.

Difference of two sets: It is the set of all elements of the first set that are not present in the second.

Domination Law for intersection: Any set intersected with an empty set gives the empty set.

Domination Law for union: The union of any set with the Universal set is the Universal set.

Identity Property for intersection: The intersection of a set with the Universal set is the set itself.

Identity Property for union: The union of a set and the empty set is the set itself.

Intersection of two sets: It is the set containing all the elements that the two sets have in common.

Null set: A set with no elements, usually denoted by ∅ or by { }.

SQL (Structured Query Language): A language used to communicate with a database.

Subset: A set formed by taking parts of the original set.

Union of two sets: It is the set of all their elements together (without repeating any elements that they share).

Universal set: A set that contains all the elements of other sets (and its own elements), usually denoted by the symbol ‘U’.

Venn diagram: A visual representation of sets.
Back (alt + , )
Next (alt + . )

note by 


    A sequence is simply a list of numbers, ordered by a rule.
    A series is the sum of a sequence’s terms.
    Sequences focus on the position and relationship between terms, while series are about the cumulative sum of those terms.




Skip to Content
My Home
Proofs: Methods and Strategies

Learn about some popular methods and strategies for writing proofs.
Introduction

There are many conjectures, or statements about discoveries and observations, that are present in mathematics. However, very few conjectures actually have explanations as to why they are true. Those few conjectures become theorems, and the explanation for any given theorem is called a mathematical proof. Developing your ability to write proofs is similar to developing your ability to explain your arguments, and doing so has numerous real-world benefits.

There are many methods and strategies in writing proofs, and some basic methods will be discussed in the next section. We’ll also include some strategies to help you choose the best method of proof for each kind of statement.
Basic Proof Methods

Imagine you work as a software engineer who is tasked with designing a software application for an important client. You submit your final proposal to your boss, but your boss asks you to explain why your design is the one that the client wants. In other words, you are tasked with proving this: if the design submitted is yours, then the client is happy. You have many ways to craft your argument, some of which are listed below:

    Direct: You demonstrate how your design meets the client’s requirements. You also mention that your design went through rigorous rounds of bug-squashing so 
    that errors are infrequent, if not nonexistent. This evidence, you claim, confirms that your software design will create a happy client.

    Contrapositive: You assert that an unhappy client was given a different software design than yours. You would demonstrate how the client was disappointed with other designs missing at least one requirement, being riddled with bugs, or having low portability. By eliminating the potential for any other option satisfying the client, you are indirectly saying that your software is the only one that could result in a happy client.
    
    Contradiction: You suppose that the client implements your software and is displeased with the results. You provide the instruction documents which 
    say precisely that the client will be happy if these requirements are met; then, you would demonstrate how your design meets those requirements 
    and conclude that an unhappy client implementing your software is a contradiction (i.e. impossible).
    
    Induction: You invite a co-worker who tested and approved of your design to promote it at the meeting to your boss, and then you would say that, if, say, your engineering team was pleased with your software, then anyone else would be pleased with it, too.
    
    Exhaustion: Your boss indicates that the client is very selective with the software designs. In response, you show why your design is better than every other implemented software design.
    
    Existence: If your boss wants you to show that your design is better than what the client has implemented previously, 
    you would provide an example of such implemented software and explain why yours is better.

    Proof by Counterexample: If instead, your boss insists that your design isn’t what the client is looking for despite meeting each requirement, 
    you provide an example of a design implemented by the client that not only meets each requirement but also has worse features than your proposed software design.

Strengths and Weaknesses of Each Method

Here is a table of the strengths and weaknesses for each proof method described above:
Method 	Strengths 	Weaknesses
Direct 	Simple and easy to understand 	Difficult to use when the statement’s assumptions don’t provide much information
Contrapositive 	Eliminates all ways for the theorem to not be true 	Indirect and difficult to understand at first
Contradiction 	Straightforward and powerful; useful for many statements 	Not desirable when the statement’s negation provides little information
Induction 	Verifies the statement for every case 	Sometimes tedious and difficult to understand
Exhaustion 	Verifies every case directly 	Very tedious, impractical, and not often applicable
Existence 	Very short and easy to understand 	Not often usable; incomplete for most statements
Proof by Counterexample 	Short, easy to read, and easy to understand 	Only useful when you suspect a given statement is false
Strategies for Choosing Your Method of Proof

One of the most difficult questions to answer when deciding how to prove a statement is often the most deceptively simple one: where to start? This section highlights some strategies that can help in picking a good method with which to start the proof. Assume for these strategies that if-then statements are given in the form of “If P then Q” for two statements P and Q.

The first strategy is to look out for keywords and phrases. Some common key terms for each method is shown here:

    Direct: Most simple statements can be proved directly. No keyword really “gives away” the impression that this method of proof is needed.
    Contrapositive: If-then statements where Q has phrases like ‘for all’ or ‘for every’ can sometimes be more easily proven by writing and proving the contrapositive of the whole statement.
    Contradiction: If-then statements where you suspect “P and not Q” is false can be best proven by contradiction.
    Induction: Almost any statement with summations or recursions is best proved by induction or strong induction. The “Induction and Strong Induction” lesson will dive deeper into this technique.
    Exhaustion: Any statement that suggests the existence of some property for every number can be proven by showing directly that every number has that property.
    Existence: Any statement asserting the existence of a number with a given property can be proven using this method.
    Proof by Counterexample: Any statement that suggests every number has a certain property can be disproven if you can provide a number that does not have that property.

The next strategy we will highlight is trial-and-error. Starting with a direct proof is usually best because direct proofs, as the name suggests, prove the statement as it is. If the proof succeeds, great! If not, then look at where you got stuck and how another method of proof could fix your issue.

Finally, we suggest taking a close look at the statement itself and understanding precisely and exactly what the statement is saying. As we saw with our first strategy, most statements have key terms or elements that lean towards a certain method of proof to use. However, misreading the statement could lead to using an undesirable proof technique that gets you stuck somewhere in the process; thus, understanding the problem statement is key to choosing the correct proof technique.
Free response

What method of proof would you use to explain why the client will accept your software design?

Your response

contradiction : this is in that the documentation provided on what will make the client happy was exhaustive of what to expect and therefore an unhappy client is contradictory as you can assert that each of the criteria elaborated upon in the documentation was met .

inductive: After rigorous testing from both you and other developers you therefore can conclude that if this people were impressed with your design then every other person would be

exhaustion and proof of counterexample where you show your client why your approach is better than what they currently have applied

Direct and proof how your design meets all the requirements set about by the client by also asserting on the rounds of rigorous test undertaken by your design
Our answer

We are being asked to prove this: if the implemented software design was yours, then the client will be happy. We don’t see any keywords and phrases that steer us towards any one method of proof, so let’s try the trial-and-error strategy:

    The direct method of proof seems good here because you know exactly how your software design meets the client’s requirements. Using this method seems to create a strong argument for yourself, and so this method of proof should be used.

Here’s why the other methods of proof may not be so useful here:

    The contrapositive proof suggests nothing about the quality of your software design; it only suggests that every other possible design is not what the client wants. What if yours isn’t good either?
    The contradiction method is a viable option, but keep in mind that random bugs may happen when any software is implemented, so the client may be unhappy with your design even though it meets every requirement. Plus, if a statement can be proven directly, then it should be proven directly as a contradiction proof can complicate the argument more than it needs to be.
    Induction doesn’t seem like a good fit here. The co-workers who liked your software are not your client, and so focusing on how your client will be happy with your implemented design is a better place to start constructing your argument.
    Exhaustion isn’t effective when you have no knowledge of the others’ designs (which you often don’t). This method also takes up a lot of time and can sometimes weaken your argument rather than strengthen it.
    The existence proof here is incomplete: being better than one implemented software design does not guarantee that your design will be selected. There could be many other implemented designs that are better than yours that you did not bring up.
    The proof-by-counterexample method is about as effective as the proof-by-existence method here. It’s incomplete and insufficient.

Review

In this article, we have introduced and compared seven basic proof techniques: direct, contrapositive, contradiction, induction, exhaustion, existence, and counterexample proofs. For any given statement, you can choose a good method of proof by using these strategies:

    Look out for keywords and phrases.
    Make sure to fully understand the problem statement.
    Try each method and see what works.

Hopefully, these strategies will improve your ability to soundly pick the best way to explain your position on solving important real-world and business problems!





Introduction to Proofs and Induction
7 min

Have you ever answered a question correctly in class but couldn’t explain why it’s correct? The ability to effectively explain your arguments is a crucial skill to 
have when you are describing why your code works to your boss or new client!

Mathematicians believe in the same idea: a mathematical proof is a mathematical explanation of why a statement (or conjecture) is either true or false. Induction is one
Preview: Docs A method is a small piece of code, usually defined in a class, that can be used outside the class and in other parts of the program.
method
of proving statements, and an induction proof is a mathematical proof using induction. There are two induction methods: mathematical induction and strong induction. These two methods will be defined and demonstrated over the next few exercises.

Some statements (which we will prove via induction) include symbols that you may not have seen before. For instance, suppose we have the expression:

∑i=15ii=1∑5​i

The Greek letter Sigma represents summation, or the adding of consecutive terms. The bottom number (i = 1) indicates where to start, and the top number (5) tells us where to stop. At each term i, we add that term operated on by the inside of the summation (in this case, i) onto the terms before it. In other words, this expression tells us to perform the operation 1 + 2 + 3 + 4 + 5. Here is another example:

∑i=0n2ii=0∑n​2i

Here, we are adding the terms 2i from i=0 to some arbitrary number n. In other words, we are adding

2(0)+2(1)+2(2)+⋯+2(n−1)+2(n).2(0)+2(1)+2(2)+⋯+2(n−1)+2(n).

Hopefully seeing this will clear things up for when summation appears later in this lesson!

For now, though, try adding the odd positive integers together, starting with the first two and increasing the number of odds you are adding together by one until you have computed the sum of the first four positive odd numbers. You might see a pattern develop!




Applications of Induction
7 min

Were you able to figure out that these sums created a pattern of 4, 9, 16, and 25, or n2? In fact, this turns out to be true for all of the positive odd integers: the sum of the first n odd integers does, in fact, equal n2.

In mathematical symbols, what we are saying is that for all positive integers n:

∑i=1n(2i−1)=n2i=1∑n​(2i−1)=n2

Induction has important applications in the computer science industry, specifically in quality assurance and case-testing. When working at any programming job, you will need to test your code for every case imaginable in order to minimize the number of errors that could occur when the product releases. A good way to case-test your code is to determine if any case creates some kind of error upon execution or compilation.

How does this idea relate to induction? We will see in the upcoming checkpoints that we need n to be a positive integer in order for our conjecture to work. To show this, we will define a number n to be nonnegative if n is an integer that is greater than or equal to zero and then we will suppose our conjecture is true for all nonnegative integers n. In other words, our new conjecture is this:

∑i=0n(2i−1)=n2i=0∑n​(2i−1)=n2




Induction: Base Case
4 min

We saw in the previous exercise an example of testing our code to discover faulty cases. We can now properly define the statement we found in Exercise 1: 
For any positive integer n, the sum of the first n odd integers is equal to n2. In other words:

∑i=1n(2i−1)=n2i=1∑n​(2i−1)=n2

How do we go about proving such a statement is really true for any positive integer n? We will use the principle of mathematical induction, the formal definition of which will be developed throughout these next couple of exercises.

The first step in any induction proof is to identify the base case (the smallest possible case for which this statement is true). For instance, suppose you wanted to show for all positive integers x that x is at most x2, or

x≤x2x≤x2

Since our cases are all of the positive integers, our base case (the smallest case) for this example is the smallest possible integer. That happens to be 1, and we can show that 1 <= 1**2 quite easily because 1 = 1**2. Therefore, we have proven the base case for this conjecture. The upcoming checkpoint will ask you to find the base case for the statement

∑i=1n(2i−1)=n2,i=1∑n​(2i−1)=n2,

which we established earlier in this narrative.




Induction: Induction Hypothesis
9 min

Congratulations, we have completed the first step to our induction proof! Next comes the inductive step, which begins with our definition of the induction hypothesis. 
The induction hypothesis supposes that our statement is true for some integer k, with the caveat that k must exceed the number set as the base case.

Recall that we supposed that for any positive integer n:

∑i=1n(2i−1)=n2i=1∑n​(2i−1)=n2

Using the definition of induction hypothesis as well as the fact that we defined the base case as k = 1 in the previous exercise, we can reword this conjecture to say this: For some integer k in which k > 1:

∑i=1k(2i−1)=k2i=1∑k​(2i−1)=k2

We will use Python to code this hypothesis through the upcoming checkpoints. For convenience, we will set the variable k equal to nine.




First, create a variable called s and set it equal to the default value of 0.
Checkpoint 2 Passed

2.

Next, set s to store the sum of first i odd integers, where i is a value starting at 1 and increments each iteration until the first k odd integers 
have been added together. In other words, rewrite:

∑i=1k(2i−1)i=1∑k​(2i−1)

using a Python script. Print s to ensure that the code worked properly.

Think back to Exercise 1. In that exercise, we calculated the sum of the first five odd integers by adding together the first four odd integers to get 16, 
then adding the fifth odd integer (9) to 16 to get 25.

In other words, for each odd integer, we add that integer to the sum of the odd integers before it. In this case, we have already set k equal to 9, 
which means that we seek the sum of the first nine odd integers. This sounds like we could use a for loop:

for i in range(1, k + 1):
  s += 2 * i - 1

Checkpoint 3 Passed

3.

Finally, use the == comparison operator to write a Python script that prints whether or not s really does equal k**2.

As a reminder, our induction hypothesis is the following: for every positive integer n,

∑i=1n(2i−1)=n2i=1∑n​(2i−1)=n2


k = 9
s = 0
for i in range(1, k+1):
  s += 2*i - 1

print(s)
print(s == k**2)




Induction: Proving the Inductive Step
4 min

Well done! We now have written out our induction hypothesis both in writing and in Python code. Our final task is to prove that our induction hypothesis 
is true for the integer k+1, where k is the value we supposed in the induction hypothesis. For our example, we want to prove that:

∑i=1k+1(2i−1)=(k+1)2i=1∑k+1​(2i−1)=(k+1)2

We first will take a look at our sum and say that:

∑i=1k+1(2i−1)=2(k+1)−1+∑i=1k2i−1i=1∑k+1​(2i−1)=2(k+1)−1+i=1∑k​2i−1

In other words, we are saying that the sum of the odd integers from 1 to k+1 equals the sum of the odd integers from 1 to k plus the k+1th odd integer. 
These two sums are both adding k+1 odd integers together, and so we can confidently say that they mean the same thing.

Does the summation on the right look familiar? That’s because that is exactly the summation defined in our induction hypothesis! We can substitute 
k2 for that sum and obtain:

∑i=1k+1(2i−1)=2(k+1)−1+k2i=1∑k+1​(2i−1)=2(k+1)−1+k2

The rest is left to basic algebra:

2(k+1)−1+k2=k2+2k+2−1=k2+2k+1=(k+1)22(k+1)−1+k2=k2+2k+2−1=k2+2k+1=(k+1)2

The result (k+1)**2 is, in fact, what we sought in the beginning, and so our proof is now complete. Sadly, Python cannot mathematically prove these 
types of arguments for you. The best we can do using Python is to test if the k+1th case is true.



Strong Induction: Multiple Base Cases
4 min

Well done, we have completed the first induction example! Let’s try a different example. For any positive integer n, the number 3n actually does have an 
interesting property:

(n+1)+n+(n−1)=3n(n+1)+n+(n−1)=3n

You may think that the first step in proving this statement is to provide one base case. Unfortunately, that base case is not enough for our new example. 
Why? The big reason is this: our induction hypothesis currently assumes that our statement is true for some integer k. Recall that our conjecture is:

(n+1)+n+(n−1)=3n(n+1)+n+(n−1)=3n

This means that our induction hypothesis is this: for some positive integer k which exceeds n,

(k+1)+k+(k−1)=3k(k+1)+k+(k−1)=3k

If we were to prove this using induction on the left-hand side, then we would need our hypothesis to be true at k-1 in order to use our induction hypothesis correctly. 
However, the current induction hypothesis states that the theorem is true at just k; thus, a new
Preview: Docs Loading link description
method
of proof needs to be used.

These next two exercises (including this one) will help to formally define strong induction, the approach we need in proving statements like these. The 
first step to strong induction is to identify the base cases we need. For this problem, since we have the terms n+1, n, and n-1 in our statement, we need 
three base cases to proceed.





Strong Induction: Induction Hypothesis
4 min

Now that we have our base cases, our next step is to fix our induction hypothesis. Recall that our statement we supposed in the previous exercise is the following:

(n+1)+n+(n−1)=3n(n+1)+n+(n−1)=3n

We noted in the previous exercise that we needed to modify our induction hypothesis so that the hypothesis is true at k and at k-1. 
We will fix this problem by supposing, for all integers between our largest base case (we saw from the last exercise that this is n = 3) and some integer k, that:

(k+1)+k+(k−1)=3k(k+1)+k+(k−1)=3k

Now we have an induction hypothesis that is true at k and at k-1. (Note that we started our assumption from the largest base case because we have already proved 
the conjecture for each base case below our largest one, and so assuming their truth is unnecessary.)

Our task will be to prove that:

(k+2)+(k+1)+k=3(k+1)(k+2)+(k+1)+k=3(k+1)

We will need to be creative with our left-hand expression. We know by the induction hypothesis that (k+1) + k + (k-1) = 3k. 
Why not force this into our left-hand side expression? We know that:

(k+2)+(k+1)+k=(k+1)+1+k+1+(k−1)+1=(k+1)+k+(k−1)+3(k+2)+(k+1)+k=(k+1)+1+k+1+(k−1)+1=(k+1)+k+(k−1)+3

We can now use or induction hypothesis to substitute 3k in for (k+1) + k + (k-1) to obtain:

(k+2)+(k+1)+k=3k+3(k+2)+(k+1)+k=3k+3

Finally, factor out a 3 from the right-hand side to obtain:

(k+2)+(k+1)+k=3(k+1)(k+2)+(k+1)+k=3(k+1)

Since we obtained our desired result, our proof is now complete.



Review
2 min

Congratulations on reaching the end of this lesson! Let’s recap what we have learned:

    A mathematical proof is a mathematical explanation of whether or not a given statement is true or false.
    Mathematical induction is a technique that proves a statement by providing one base case, assuming the statement is true for some larger 
    integer k, then proving the statement is true for k+1 using said assumption (induction hypothesis).
    Strong induction is a technique that proves a statement by providing more than one base case, assuming the statement is true for all integers 
    from the largest base case to some even larger integer k, and then proving the statement is true for k+1 using that assumption (induction hypothesis).

As a final check for understanding, the checkpoint that follows will test your ability to determine which statement requires which
Preview: Docs Loading link description
method
. A statement will be provided below, and you will type your suggested method of proof in Python.
