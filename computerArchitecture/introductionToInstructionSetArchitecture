Skip to Content
My Home
Introduction to Instruction Set Architecture

Take your first steps into Instruction Set Architecture as well as a comparison of CISC and RISC design practices

If you decided that learning what goes on under the hood of a computer is valuable, we would like to congratulate you on taking your knowledge of computers and data processing systems to a higher level. The first fundamental level in overall computer design theory is the ISA or Instruction Set Architecture.
What is ISA?

We can think of the ISA as a translator which helps two people speaking different languages communicate. In this case, the two “people” trying to communicate are our computer’s hardware and our computer’s software.

In practice, the hardware of our computer, such as the Central Processing Unit (CPU), works with a series of electrical signals called binary, meaning ‘composed of two things:

    0 representing ‘OFF’ or FALSE
    1 representing ‘ON’ or TRUE

Our computer’s software, the programming languages we typically write in like C++, Java, or Python, uses human-readable code such as double priceOfGas = 2.49; and if-else statements. The hardware and software of our computers are not speaking the same language because 0’s and 1’s do not directly equate into phrases that we programmers can read.

It is ultimately the job of the ISA to manage the translation of these values into the hardware readable code. The ISA defines the list of all the functions that the CPU can understand and how to translate a message between the hardware and software so that both entities understand each other.
Challenges of Connecting Hardware to Software

Picture yourself as a computer scientist in the middle of the 20th century faced with the following problem:

    “How can we figure out how to make operating a computer easier? How can we set up these computers so our programmers can focus on writing computer programs and not have to relearn the computer components? We want the electrical engineers to work with the hardware and the software engineers to work with the logic without the two having to talk to each other. We need to come up with a standard for these communications.”

You can already see how great a challenge this would become and how, through painful trial and error problem solving, we are still evaluating ways to increase the efficiency of the process. The fact that our hardware is constantly getting smaller, faster, and able to run at a higher capacity has been a constant challenge in arriving at the perfect ISA solution. What used to take up an entire room, such as the UNIVAC I computer below, can now be contained in the world’s “dumbest” smartphone.

UNIVAC I Computer

Credit: Computer History Museum

The UNIVAC I was praised for being able to compute a hundred years of math in two hours. The fastest computer today, the Summit, now can compute “in one second, what would take humans 6 billion years.” It still takes up about the same space as the UNIVAC, but with much better performance characteristics. Just as software design practices evolve to change the industry, hardware advancements make those changes obsolete, and vice versa. This constant battle has driven the speed of advancement to an incredible pace.

Summit Super Computer

Credit: Carlos Jones/ORNL, CC BY 2.0
Early History: CISC vs RISC
CISC

The first attempts at designing ISAs focused on reducing the number of instructions that a computer would have to process. Many of the data transfer channels were moved by hand, physically disconnecting wires and plugging them into different components, so the logic went that the fewer times people had to move the cables, the faster this would go. Memory space was also very limited, meaning that the fewer lines of code, the better.

Inside the computer, this was implemented with more hardware such as cables, components, and a significant increase in power consumption to processes complex instructions. It was generally viewed that combining instructions such as “load a number from memory, perform an arithmetic calculation, and store to another memory location” into one instruction was the most efficient way to get things done.

This new standard of architecture models came to be known as Complex Instruction Set Computer, or CISC for short, and for quite some time reigned supreme in design theory. The design focused on having computer scientists write as few lines of code as possible to maximize their performance.
RISC

It wasn’t until the mid-1970s that another approach came along, the Reduced Instruction Set Computer or RISC. John Cocke, widely recognized as the founder of RISC, theorized that if they simplified the instructions to a very limited number of easy calculations, the computer could process them in a single machine cycle, allowing for multiple processes to be “pipelined” (something we’ll learn in an upcoming module), and in turn resulting in faster overall speeds and reducing the amount of power needed to operate the computer.

Dr. Cocke, when reviewing the inputs and outputs of a CISC computer at a telegraph switchboard, realized that the computer rarely chose the most advantageous method of performing a task. By reducing the number and complexity of the instructions he could improve the overall performance while at the same time reducing components, power use, and heat generation. The downside was that the programmers would have to write more code for the computer. We might not think twice nowadays about creating a several thousand line program, disk space is nearly limitless and RAM is abundant, but in the days of Dr. Cocke, these resources were just beginning to show signs of being capable of handling large programs.
Modern and Future ISA Design

Three primary ISAs have emerged out of the technology revolution of the late 20th century:

    x86 (CISC design)
    ARM (RISC design)
    MIPS (modified RISC design for embedded processors)

Each design has its advantages, disadvantages, and parts of the industry where they excel and will continue to do so for the foreseeable future. Eventually, quantum computing will force the development of new ISAs as hardware begins relying on more than two states (OFF and ON) and transforms into multi-state 
logic processors (OFF, ON, and both). Companies such as IBM, Intel, and Microsoft are working diligently to develop these solutions as the technology arrives.
Conclusion

Let’s review some of the key topics you learned throughout this article:

    An ISA, or Instruction Set Architecture, is the framework that defines the communication between the hardware and software of our computers.
    It is the set of commands that our computers can perform and these definitions fall into two distinct design practices, CISC and RISC.

Back (alt + , )
Next (alt + . )





Central Procesing Unit
2 min

A Central Processing Unit (CPU) is the electronic circuitry that executes instructions based on an input of
Preview: Docs Loading link description
binary
data (0’s and 1’s).

The
Preview: Docs Loading link description
CPU
consists of three main components:

    Control Unit (CU)
    Arithmetic and Logic Unit (ALU)
    Registers (Immediate Access Store)

The Control Unit (CU) is the overseer of the CPU, responsible for controlling and monitoring the input and output of data from the computer’s hardware.

The Arithmetic and Logic Unit (ALU) is where all the processing on your computer takes place. Even as you scroll this text box, the ALU is calculating pixel 
changes on the screen and sending that output to the monitor.

The register, or immediate access store, is limited space, high-speed memory that the CPU can use for quick processing.

These components are all wired in very specific ways in order to process data. It is important here to remember that data, to our hardware, is a series of binary, 
on and off, electrical pulses. These pulses are run through different wires, semiconductors, and components as a means to process and return data that is usable by 
the software.

The list of instructions that a CPU can support, the way the electrical pulses are sent, is what makes the foundation of the Instruction Set Architecture.



CPUs Continued
2 min

Now that we have a general understanding of the
Preview: Docs Loading link description
CPU
, let’s dive a little deeper.
Control Unit

The Control Unit is the component receiving instructions from the software and running the show. Its primary job is making sure that data is sent to the right 
component, at the right time, and arrives with integrity.

Part of this job is keeping all the hardware working on the same schedule. It does this with a clock, which sends out a regular electrical signal to all 
components at the same time to coordinate activities.
ALU

The ALU is the fundamental building block of the CPU, the brains of the entire computer. Nearly all functional processing occurs in this chip. As the name implies, 
the ALU’s functions can be divided into two primary areas:

    Arithmetic operations that deal with calculating data (e.g. 5 * 4 = 20)
    Logic operations that deal with comparisons and
    Preview: Docs Loading link description
    conditionals
    (e.g. 25 > 10)

Registers

Registers are small pieces of memory right on the CPU. They are fixed in number and defined in the Instruction Set Architecture. There are typically 8, 16, 32, or 64 registers depending on the architecture and are also fixed in size based on the size of the number it can hold. They provide the CPU with a place to store and access 
values that are crucial to the immediate calculations the ALU is processing.



Additional Computer Hardware
3 min

The
Preview: Docs Loading link description
CPU
is just a single component of the computer’s hardware, other important components of hardware include Random Access Memory (RAM), buses (high-speed wires), 
as well as hard disks and other non-volatile memory.
Random Access Memory

Random Access Memory, or
Preview: Docs Loading link description
RAM
, is additional high-speed memory that a computer uses to store and access information on a short-term basis. In general, a computer’s performance 
can be directly correlated to the amount of RAM it has available to use. RAM is considered primary volatile memory, which means it loses whatever is 
stored on it as soon as power is disconnected.
Buses

A bus is an engineering term for a job-specific high-speed wire. These wires are often grouped together in bundles and will transfer electrical signals 
either in parallel or in serial — that is, many signals at once or one pulse at a time. Buses can be grouped into three functions: data buses, address 
buses, and control buses.

Data buses carry data back and forth between the
Preview: Docs Loading link description
processor
and other components. Data buses are bidirectional, which means that they transfer data both to and from other locations.

Address buses carry a specific address in memory and are unidirectional. We can visualize all of our memory like a village with each house representing a 
package of data. Every house/data has an address. When our computer tells a program or component what data to use, it sends the address and then the component 
knows where to find the data when it needs it.

Control buses are also unidirectional and are responsible for carrying the control signals of the CU to other components as well as the clock signals for 
synchronization.
Hard Disks

Hard disks, or hard drives, are responsible for the long-term, or secondary storage of data and programs. This is an example of non-volatile memory, 
meaning that it will retain its information when we shut down our computer.



Instruction Set Architecture
Machine Instructions
4 min

What the Instruction Set Architecture is centrally focused on is defining the machine instructions that our hardware can understand.

Machine instructions, or
Preview: Docs Binary is a number system of 1s and 0s which serves as a textual representation method for giving instructions to a computers CPU. In computing and telecommunications, binary codes are used for various methods of encoding data such as turning the character strings of source code, into bit strings or instruction 
sets for the CPU to execute.
binary
code, come packaged in very specific ways. If the software generates binary that doesn’t follow the rules set out by the ISA, the hardware will fail in its processing of the data.

The way instructions are formatted is different from one architecture to the next. A Complex Instruction Set Computer (CISC) and a Reduced Instruction Set Computer (RISC) will not understand the same data.

An example machine instruction might look like this:

    10110010011101001100100111000001

One
Preview: Docs Loading link description
CPU
might interpret this as an instruction to add together two numbers, another might think it as a request to logically skip the next instruction if the result is true. A different CPU might not be capable of handling the data at all and return an error.

One way to quickly identify what type of computer a piece of
Preview: Docs Loading link description
machine code
belongs to is to look at the length of the instructions. Typically, RISC computers use machine code that is all the same length, while CISC instructions can range in size from quite small all the way to 15 bytes (120 bits)!

Computers are only as intelligent as the rules we use to design and program them. Like most things in life, they follow the garbage in, garbage out principle, that is why so much time and research has been spent creating robust Instruction Set Architectures.




OPCODEs
8 min

The Instruction Set Architecture defines how hardware processes binary data. Each 0 or 1 of binary data is called a bit and groups of these bits are put together in specific lengths that create instructions.

While the length of a specific binary instruction varies widely based on the ISA that is being used, the first few bits are always the OPCODE or OPeration CODE. This sequence of bits tells the processor what type of instruction it is receiving.

Every function or calculation that a processor can perform is defined by a specific OPCODE and the CU routes the remaining bits of information to the corresponding 
hardware that will execute the operation.

The list of all of these is included with the ISA documentation in the form of an OPCODE Table:
Mnemonic 	OPCODE 	Layman’s Definition 	Formal Definition
ADD 	000001 	Loads two numbers from registers and
saves result into another register 	rs_reg <- op_reg_1 + op_reg_2
LOAD 	000010 	Loads a number from a memory address
location into a register 	rs_reg <- mem[op_reg_1_addr]
STORE 	000011 	Copies data in a register to a
memory address for long-term storage 	mem[op_reg_1_addr] <- op_reg_2

After the OPCODE, the remaining bits in the instruction are normally referred to as the “operands”. These are the pieces of data, sometimes presented as memory 
addresses or sometimes given directly as literals, on which the processor will operate.

The CPU will fetch the data from memory or registers, perform the function, and then return the result to the directed memory address or register.

Let’s take a look at this example 32-bit instruction and identify the OPCODE:

000001 01001 10111 0001101001010110
OPCODE

If we use the table we had from above, the first six digits are the OPCODE (000001), telling the CPU that this is an ADD function. The remaining 
bits provide the CPU with instruction specifics that we will cover in the next exercise.

We will be using a Python interface to process our mock instructions for the rest of this lesson, a basic OPCODE interpreter is written in the code editor.



from background import opcodeReader
from background import userGuess1
from background import userGuess2

# OPCODE Table:
# +-----------|--------+
# |   Name    | OPCODE |
# |-----------|--------|
# | ADD       | 000001 |
# | SUBTRACT  | 000010 |
# | MULTIPLY  | 000011 |
# | DIVIDE    | 000100 |
# | LOAD      | 000101 |
# | STORE     | 000110 |
# +--------------------+

# Checkpoint 1
print(f"The '000001' OPCODE instructs the processor to {opcodeReader('000001')}.")


# Checkpoint 2
userInput1 = 'LOAD'
print()
print(userGuess1(userInput1))



# Checkpoint 3
userInput2 = 'MULTIPLY'
userInput3 = 'SUBTRACT'
userInput4 = 'STORE'
print()
print(userGuess2(userInput2, userInput3, userInput4))



Instruction Formatting
4 min

In the previous exercise, we created the following OPCODE example:

000001 01001 10111 0001101001010110

We now know that the first part of the bit sequence is the OPCODE, but what about the rest? The rest of the message is the operands, memory locations, and additional functions that the
Preview: Docs A processor is the electric circuitry found in computer hardware which is responsible for executing instruction sets derived from programs that have been converted into machine code.
processor
will perform.

We’ll take the simple multiplication of 5 * 6 to visualize two different ISA styles, CISC and RISC, before we start to decipher the code beyond the OPCODE.

CISC
Preview: Docs Loading link description
machine code
is so long because the goal of CISC is to reduce the total number of instructions that are fed into the hardware. It may take multiple cycles of hardware to process the instruction, but it will still get done. The original purpose was to reduce the required memory for a program because memory was very expensive and consumed lots of space:

Machine Code: 001010010001001010100101010100101000101010101001111010010010010100101010001010010100010100001101000111101101011010101011101001
Readable Code: MUL 5 * 6

RISC on the other hand, would take a CISC instruction and break it up into several very simple tasks that each require one cycle to complete. This may require more operations, but allows for multiple sequencing, or pipelining, of tasks to make up for it. Essentially, since all tasks take the same amount of time to complete, they can be executed more efficiently like so:

Machine Code: 00101001101001001001000100011100
Readable Code: LOAD 5 from REG 1

Machine Code: 00101001101001111001000100011100
Readable Code: LOAD 6 from REG 2

Machine Code: 00011000101001010101111000110001
Readable Code: MUL 5 * 6

Machine Code: 00111001101010100000111101010011
Readable Code: STORE 30 in REG 3

As we begin breaking up the remaining bits in our machine code, we will use a specific type of RISC instruction architecture called MIPS, or Microprocessor without Interlocked Pipeline Stages. It has a fixed 32-bit instruction length, limited instructions, and is used by most post-secondary educators for its ease of understanding. Here is a link to the documentation if you want to learn more about the MIPS architecture.




Instruction Set Architecture
MIPS Instructions
6 min

The MIPS ISA is a simple instruction set that is broken up into three distinct types of instructions, all 32-bits in length:

    R-Type or Register MIPS instructions are used for most arithmetic and logic operations
    I-Type or Immediate instructions are used primarily for data transfer and immediate operations using constants
    J-Type or Jump instructions are used to jump the program to the specific instruction, such as in a loop

Along with the instruction types, it also details that each
Preview: Docs Loading link description
CPU
will have 32 registers, each capable of holding a 32-bit piece of data. MIPS operates on data that is stored in the register or with a 16 bit ‘immediate’ 
piece of data. Immediate data is typically a constant that can be sent to the
Preview: Docs Loading link description
processor
so it doesn’t need to take up space in a register.

MIPS is often used in distributed/embedded technologies because of its RISC architecture and concise instruction set. Some advantages to this in a small 
system include limited space requirements, increased battery life, and little to no customer interaction.
Instruction Format

Here is a sample R-type instruction:

000000 00000 00000 00000 00000 000000
  op    rs    rt    rd   shamt  func

All R-type instructions use this instruction format according to the MIPS documentation. This example introduces several abbreviations above in the 
machine code/instructions. They will be used throughout the rest of this lesson, so let’s define them now:
Abbreviation 	Definition
op 	OPCODE
rs 	first source register
rt 	second source register
rd 	destination register
shamt 	bit shift amount
func 	extra bits for additional functions



R-Type Instructions
4 min

R-Type instructions are the most common in MIPS and give us a good way of understanding how an ISA defines the process that a
Preview: Docs Loading link description
CPU
goes through when receiving data.

All R-type instructions have an op of ‘000000’ which signifies to the
Preview: Docs Loading link description
processor
to look at the func bits to determine which process to execute.

The three references to registers, (rs, rt, rd) directly call them by number. There are 32 registers in a MIPS system and the five bits will produce 32 numbers 
(0 as 00000 to 31 as 11111). The first two (rs & rt) are the operands and the last (`rd) is where to store the result.

The shift amount is used to shift the number by the amount in the shift bits, for our purposes this will always be 00000, meaning no shift. The last six bits 
are the function to be performed on the operands.

Let’s take a look at this example instruction:

000000 00101 10010 00110 00000 100000
  op    rs    rt    rd   shamt  func

Now, let’s break the instruction down:

    op -> 000000 signifies an R-Type instruction
    rs -> 00101 gets contents in Register 5
    rt -> 10010 gets contents in Register 18
    rd -> 00110 sets the result in Register 6
    shamt -> 00000 means there is no shift
    func -> 100000 function signature for adding

Our processor will add the contents of Register 5 (16) and Register 18 (103) and store that result (119) into Register 6. In the example, these numbers 
are shown as integers, but in the registers they will be stored in
Preview: Docs Binary is a number system of 1s and 0s which serves as a textual representation method for giving instructions to a computers CPU. In computing and telecommunications, binary codes are used for various methods of encoding data such as turning the character strings of source code, into bit strings or 
instruction sets for the CPU to execute.
binary
. Notice that the first register is always 0 and is a protected register, this is common in most ISAs.




The two tables in the code editor represent the data stored in the registers before and after the ADD instruction is passed to the CPU. You will notice 
that the original numbers being added still remain in their location in the register. They will stay there until they are overwritten or power is turned 
off to the CPU. Registers are volatile memory.


# Registers (32 total on CPU, 0-indexed, register 0 is constant 0)
# Before addition
# +========+========+========+========+========+========+========+========+
# | 0: 0   | 1:     | 2:     | 3:     | 4:     | 5: 16  | 6:     | 7:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# | 8:     | 9:     |10:     |11:     |12:     |13:     |14:     |15:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# |16:     |17:     |18: 103 |19:     |20:     |21:     |22:     |23:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# |24:     |25:     |26:     |27:     |28:     |29:     |30:     |31:     |
# +========+========+========+========+========+========+========+========+

# Instruction sent from software (machine code) to hardware (CPU):
00000000101100100011000000100000


# Registers (32 total on CPU, 0-indexed, register 0 is constant 0)
# After addition
# +========+========+========+========+========+========+========+========+
# | 0: 0   | 1:     | 2:     | 3:     | 4:     | 5: 16  | 6: 119 | 7:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# | 8:     | 9:     |10:     |11:     |12:     |13:     |14:     |15:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# |16:     |17:     |18: 103 |19:     |20:     |21:     |22:     |23:     |
# +--------+--------+--------+--------+--------+--------+--------+--------+
# |24:     |25:     |26:     |27:     |28:     |29:     |30:     |31:     |
# +========+========+========+========+========+========+========+========+