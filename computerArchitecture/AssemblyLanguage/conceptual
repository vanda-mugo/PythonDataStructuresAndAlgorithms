Introduction to Assembly Languages
1 min

An important step in the journey to execute code is Assembly.

The process of code execution starts with a software developer creating a program in a high-level programming language, such as Python or Java, that was 
designed to be easily read and understood by humans.

For a computer to execute this program, the code must be simplified into
Preview: Docs Loading link description
binary
. In our humble beginnings, programmers initially coded in binary; then, Assembly was created to make it easier for humans to program.

Assembly is a low-level programming language used to directly translate instructions into the computer’s
Preview: Docs Loading link description
machine code
in a more human-readable way. Similar to machine code, each instruction begins with an opcode and then references memory locations or
Preview: Docs Loading link description
data types
to operate on.

Understanding Assembly is an essential skill on the path to becoming a professional software developer. Studying Assembly allows us to “get under the hood” 
of our typical programs, making better decisions when it comes to data storage,
Preview: Docs Loading link description
algorithm
optimization, and hardware interactions.


Modern Assembly Applications
2 min

While Assembly has been mostly abstracted away from the lives of the majority of programmers, it still has a few specific use cases throughout the industry such as:

    Embedded systems that have limited memory and hardware capacity
    Direct hardware testing
    Software optimization

Embedded systems, along with their microcontrollers, are very often programmed in Assembly because it gives programmers the ability to control hardware functions 
on a task by task level, ensuring the size and speed of the program maximizes hardware limits.

A refrigerator, for example, has limited storage and computing capacity. Programming in Assembly ensures that both are used to their full potential.

Learning an Assembly language can give a programmer the idea of the “cost of code”. Certain algorithms can be optimized based on data storage and memory access 
techniques. Understanding how hardware implements these techniques can help a programmer choose the right tools for the right job and develop superior code.

Small optimizations in programs might not seem incredibly important with our advances in processing power, but in some cases, they can make all the difference. 
For example, if we are trying to achieve as near to real-time analysis as we can get, say to predict market swings in the stock market, things as trivial as 
the bit-space taken up by an integer can make a huge difference at run-time.

There are several Assembly languages, each written for a specific
Preview: Docs Loading link description
processor
, or more precisely, in accordance with a processor’s Instruction Set Architecture. Three primary industry competitors are the x86, ARM, and MIPS architectures, 
which account for the majority of desktop, mobile, and embedded technologies respectively.

While we won’t master a specific Assembly language in this lesson, the goal that remains is to understand how Assembly language works on a fundamental 
level in order to write better software.



Compilation Process
3 min

Before we dive too deep into Assembly language, let’s take a step back and learn where Assembly language fits into the everyday process of
Preview: Docs Software engineering is a field of study that involves using engineering principles to design, build, test, and maintain software systems.
software engineering
.

When we push Run in our
Preview: Docs A code editor is a program designed for writing software and utilizing human-readable text to make code easier to parse and understand.
code editor
, the computer is performing a number of tasks in the background before the
Preview: Docs Loading link description
computer hardware
even gets to see its first bit of
Preview: Docs Loading link description
binary
code.

In general, there are four steps, known as the Compilation Process, that make up the journey high-level code goes on before reaching the hardware:

    Preprocessing is the first step of compilation and is used to prepare the user’s code for
    Preview: Docs Loading link description
    machine code
    by removing comments, expanding included macros, and performing any code maintenance prior to handing the file to the compiler.
    Compiling is the process of taking the expanded file from the preprocessor and translating the program into an optimized Assembly language.
    Assembling is the process of taking an assembly language program and using an assembler to generate machine code.
    Linking is the process of filling in function calls, including additional objects, libraries, and source code from other locations into the main source code.

While the compilation process is tailored to each language and architecture, the overall procedure is fairly standard. It is in the compiling and assembling stages 
where Assembly is generated and used to create machine code.




Click Run to see the translation of the Python function in the code editor into the MIPS Assembly language. This is step two of the compilation process, compiling.


from translate import translate


# Software Developer's Code

def square(num_to_square):
    return num_to_square * num_to_square






translate()








Assembly Language
Assembly Code Format
8 min

The generated Assembly from the last exercise follows much of the same semantics as the
Preview: Docs Machine code (also known as machine language or native code) is a low level programming language in the form of hexadecimal or binary instructions that execute computer programs on the computers CPU.
machine code
we learned in the ISA lesson. This is because Assembly language and
Preview: Docs Loading link description
binary
code have almost a direct translation between their outputs.

Assembly was created as a mnemonic language to make machine code easier to read and write, one instruction translating to one instruction. In fact, most ISAs will 
have both the binary code and Assembly language breakdown on the same page when talking about specific instructions.

Just like in binary, Assembly begins with an opcode. Luckily for us, the opcodes are much more readable than a bunch of 0’s and 1’s. Let’s take a look at the multiply function:

Assembly:

MULT $3, $2

Binary:

00000000111001100000000000011000

It’s easy to see how much easier it is to write a program in Assembly than to write it in binary. In most Assembly instructions, what follows the opcodes are the memory locations to be operated on. These memory locations are referred to as operands. Generally, these are direct register addresses but can also be memory references 
to values stored in other types of memory such as the
Preview: Docs Loading link description
cache
or
Preview: Docs Loading link description
RAM
.

In MIPS, direct register addresses begin with the $ symbol, so in our MULT example, we are multiplying the value stored in register $2 by the value in register $3. 
You can learn more about MULT and other MIPS functions in the official MIPS32 Documentation.





Arithmetic Operations
6 min

Arithmetic operations make up the majority of functions in the Assembly languages.

After all, the manipulation of
Preview: Docs Loading link description
binary
numbers is how you execute any type of code, whether that be changing a character from lowercase to upper case or turning a pixel on a screen from red to blue.

One of the most important aspects of mathematical operations is how numbers are stored at the machine hardware level. Memory locations, such as registers,
Preview: Docs Loading link description
cache
, or secondary storage, all have fixed binary lengths.

These fixed lengths mean that processors must have special registers to “catch” overflow from operations. Overflow operations can include handling extremely large numbers, marking when a carryover occurs in addition or storing both the quotient and remainder of division operations.

Most languages allow for at least two distinct types of each arithmetic operation. One type performs a calculation on two registers and the other performs an operation using one value from a register and another value that is directly added, known as an immediate or constant.

The addition calculation for example can be called using the ADD opcode which then takes three registers as operands, two registers to add together and another to store the answer in.

The addition function also has an ADDI command, which takes a register address and a constant to operate on and a register to store the answer in.

In the ADD function, the value in $5 is added to the value in $4 and stored in $6.

ADD $4, $5, $6

In the ADDI function, the constant 7 is added to the value in $4 and stored in $6

ADDI $4, $6, 7

Other common arithmetic operations include: SUB, SUBI, MULT, MULTI, DIV, and DIVI.




Assembly Language
Memory Access Operations
5 min

Memory access and the control of stored information is an incredibly powerful aspect of Assembly while also being one of the most confusing.

As we write Assembly, we control exactly where every piece of information is stored. This means it is on us to choose if a value is stored in a register for immediate use or in alternate memory to be loaded from later.

In the MIPS Assembly language, all calculations are performed exclusively on registers. Since we are limited on the number of registers we have, when we no longer need to use data right away we push it back into memory to access later.

The statements that provide these push and pull operations are LW and SW, which stand for LOAD WORD and STORE WORD.

A word is a fixed length of data defined by the ISA. In the MIPS32 architecture that we have been using, a word is a 32-bit value.

In this example we will load a number value from memory, add 15 to it, and save it back to memory:

    LW loads the value stored in the memory address of Register 3 into Register 1

LW $1, ($3)

    ADDI adds the value of Register 1 and the constant, 15, and stores the result in Register 1

ADDI $1, $1, 15

    SW stores the value in Register 1 to the memory address of Register 3

SW $1, ($3)

    XOR is used to store zero in Register 1, essentially resetting the register.

XOR $1, $1, $1

Unlike high-level languages, in Assembly, it is the programmer’s responsibility to remember where pieces of data are stored and ensure not to overwrite it. 
Registers are limited and memory takes time to access, so it is a careful balancing act of keeping data available or pushing it deeper into memory.





Control Flow Operations
4 min

In Assembly, we use branches and jumps to provide control flow in our programs.

A branch statement is used to define a conditional statement. Think of it as a fork in a river. We are sitting in our kayak and trying to make a decision. 
If something is true, take the fork on the left; if it’s not true, take the fork on the right.

Since we are dealing with binary values, most branching operations center around arithmetic operations and their results.

There are two primary ways we branch:

    On equality
        BEQ (Branch on Equal)
        BNE ( Branch on Not Equal)
    On reference to zero
        BGTZ / BGEZ (Branch on > zero / Branch on ≥ zero)
        BLTZ / BLEZ (Branch on < zero / Branch on ≤ zero)

The other way we can control the flow of our program is to jump directly to a specific instruction using a jump statement, followed by the memory 
location that contains the instruction. This is similar to making function calls or returning back out of a function.

    Jump to Register 31 and execute the instruction stored there:

J $31

In Assembly, we jump to a memory location and execute the code stored there as its own binary instruction. This can start a separate subroutine or simply perform the function of starting a loop over.




Memory Addressing: Direct and Indirect
6 min

You may have noticed the use of dollar signs and parentheses in our previous code. These are some MIPS language conventions used to denote direct and indirect memory referencing.

Let’s assume that Register 5 has the value 11010001112 (83910) stored in it. Let us also assume that there is a piece of memory with the address 839 that contains the value 10001110001112 (455110).

When we directly reference something in memory, we are telling the assembler that we want the value that is stored in that exact location.

Let’s take a look at an Assembly code example that adds the value of Register 5 to Register 5 and saves the result in Register 6:

ADD $5, $5, $6

Register 6 now contains 110100011102 (167810). 839 + 839 = 1678

When we indirectly reference memory, we are telling the assembler that we don’t want to use the value of what is stored in the reference, we want to use that value as the address to another memory location and use the value stored there.

LW $4, ($5)
ADD $5, $4, $6

In MIPS we can only perform operations on registers so the first step is to retrieve the value from memory with the Load Word statement and save it into Register 4. When we use the parentheses around Register 5, we are now telling the assembler to go and find the data that is stored in the memory address 839 which was 10001110001112 (455110).

At the conclusion of our ADD statement, Register 6 now contains the value 10101000011102 (539010). 4551 + 839 = 5390.



Translation between Assembly and Binary
2 min

Assembly was written as the first language above
Preview: Docs Loading link description
binary
to make it easier for humans to write functional programs. As such, there is almost a line for line equivalency between the two codes.

When we first translated the simple square()
Preview: Docs Loading link description
method
to Assembly in Exercise 3, our two lines of Python code expanded into 16 lines of Assembly. The
Preview: Docs Loading link description
code editor
has the Python and the translated Assembly in the window to the right.

When the Assembler translates the Assembly code into
Preview: Docs Loading link description
machine code
, each line will create a 32-bit MIPS instruction in accordance with the standards of the ISA.

The Assembly ADD function and the binary ADD function are structured the same way in the documentation in order to give developers better control over their programs.





from translate import translate


# Assembly Code
#   square:
#      addiu $sp,$sp,8
#      sw $fp,4($sp)
#      move $fp,$sp
#      sw $4,8($fp)
#      lw $3,8($fp)
#      lw $2,8($fp)
#      nop
#      mult $3,$2
#      mflo $2
#      move $sp,$fp
#      lw $fp,4($sp)
#      addiu $sp,$sp,8
#      j $31
#      nop

translate()




Summary
1 min

Congratulations on making it through the Assembly Language lesson!

Assembly languages play an important role in understanding how computer programs execute at the hardware level. Seemingly simple operations like our square() function actually require many more steps when translated into individual
Preview: Docs A processor is the electric circuitry found in computer hardware which is responsible for executing instruction sets derived from programs that have been converted into machine code.
processor
tasks.

Learning how these larger programs increase or decrease a processor’s workload can significantly affect the performance of a program.

As we write in a high-level programming language, our code leaves our editor and executes the steps of the compilation process in order to make our code functional.

Most of this process has been abstracted for general software developers but can still be accessed in order to optimize specific portions of your program. The translation to Assembly is one of the steps code takes on its journey to your
Preview: Docs Loading link description
computer hardware
.

While first written to make it easier for early programmers to write code, Assembly now primarily serves the purpose of testing hardware applications or providing precise control of limited capacity embedded systems.

Assembly languages very closely mimic the
Preview: Docs Machine code (also known as machine language or native code) is a low level programming language in the form of hexadecimal or binary instructions that execute computer programs on the computers CPU.
machine code
and ISAs will show references to both Assembly and
Preview: Docs Loading link description
Binary
instructions when defining functionality.

Instructions always start with an opcode that defines the operation to be performed and follows that with the operands, or memory locations, to be operated on.

Some of the basic types of operations that make up an Assembly program are:

    Arithmetic (Add/Subtract)
    Memory Access (Load / Store)
    Preview: Docs Loading link description
    Control Flow
    (Branch/Jump)











Skip to Content
My Home
Assembly Language Problem Set

Test and expand your understanding of Assembly Language principles with these free-response questions.

Here are some tips to help get you through this problem set:

    These Assembly questions will use a specific Assembly Language, MIPS32, for each question, however, the concepts underlying each question are language agnostic.
    An integral skill in all software developer’s toolkits is the ability to read source documentation and extract relevant information, with that said, it will be required to reference the MIPS32 documentation. There is:
        a Quick Reference Guide, which will provide most of the reading for the problems
        the MIPS Documentation (Introduction Manual)
        an In-Depth Instruction Manual for a deeper dive into actual instruction processing.
    This is a cumulative knowledge worksheet, meaning you will draw on the combined knowledge of the Binary numbers, Instruction Set Architecture, and Assembly Language modules.

Proceed to the problems when you are ready!
Problem 1
Free response

Given the following instruction and register assignments, what will the values of V0 (the ‘return value’ register), LO (Special Accumulator Register), and HI (Special Accumulator Register) be?

Instruction:

MULTU A0, A1

Register 	Value (32-bit Binary)
A0 	00000000000000000000000000101001
A1 	00000000000000000000000111100111
V0 	Unassigned
LO 	Unassigned
HI 	Unassigned

Your response

V0 = 00000000000000000101000000111111 LO = 00000000000000000000000000000000 HI = Unassigned
Our answer


The first thing to do is find the opcode in the documentation in order to determine what operation is being conducted. In this case, the MULTU opcode refers to the multiplication of two unsigned numbers, the values stored in registers A0 and A1.

Our second task is to multiply the contents of A0 and A1. In binary, the multiplication of two 32-bit numbers will result in a 64-bit answer, it is up to you if you wish to do binary or decimal division.

We converted the numbers back to decimal, so A0 becomes 41 and A1 becomes 487 so that we can better visualize the answer.

41 x 487 = 19967

This number is then converted back into binary, except using 64-bits. Since these are unsigned integers, all the extra leading bits of the 64-bit answer will be filled with 0’s. 1996710 = 10100001011110, plus all the leading zeroes.

0000000000000000000000000000000000000000000000000100110111111111

Since the MIPS32 architecture only has 32-bit registers, the solution to this was the creation of two special-purpose registers, HI and LO. The high-order bits, the first 32-bits (left to right) of the result are stored in the HI register and the low-order bits, the last 32-bits of the result are stored in the LO register.

After this single MULTU instruction, the registers will now look like this. Note that no value has been stored in the return value register, V0 even though this is the result we want to return. That will require another instruction altogether to read the HI or LO registers. After our MULTU instruction, our registers now look like this:
Register 	Value (32-bit Binary)
A0 	00000000000000000000000000101001
A1 	00000000000000000000000111100111
V0 	Unassigned
LO 	00000000000000000100110111111111
HI 	00000000000000000000000000000000


Seemingly simple arithmetic becomes a multi-stage operation on most computers because of hardware limitations and there are some operations that can reduce the overall number of operations needed to perform simple math. For example, sometimes it is not necessary to call a standard multiplication instruction when you are sure the answer will not use one of the HI or LO registers.
Problem 2
Free response

Given the following instruction and register assignments, how would we complete this operation to ensure that the correct value is stored in V0 when we know that the value will not exceed 4,294,967,295 (the largest 32-bit unsigned number)?

Instruction:

MULTU A0, A1

Register 	Value (32-bit Binary)
A0 	00000000000000000000000000101001
A1 	00000000000000000000000111100111
V0 	Unassigned
LO 	Unassigned
HI 	Unassigned

Your response

LO = 00000000000000000100110111111111 HO = 00000000000000000000000000000000 VO = Unassigned
Our answer


There are two ways to approach this problem, one from a speed and optimization point of view and the other from a legacy code perspective.

Reading the documentation you will see that legacy implementation of unsigned multiplication is done with the MULTU function followed by a call to check the HI and LO accumulator register for the answer. Since we know that the answer will not exceed the LO register, we need to find an instruction that reads the LO register, that function is MFLO.

Our code now consists of two lines:

MULTU A0, A1
MFLO V0

If you read carefully, you will see that this legacy implementation also prevents us from performing another instruction that will affect the HI or LO registers within two instructions of the MULTU instruction due to the way MIPS is pipelined, which you will learn about in an upcoming module.

The second way to achieve the desired result is to rewrite the code to use the MULU instruction, which multiplies two registers together and stores the 32 low-order bits in the destination register, disregarding the 32 high-order bits altogether.

Our reimplementation of the multiplication is completed with this single line of code:

MULU V0, A0, A1

Since MIPS is typically used in embedded applications, with limited memory, optimizing code down to the instruction level is an important task that can’t get overlooked.
Problem 3
Free response

What is the result of the following operation given the contents of the registers?

Instructions:

JR T2
NOP

Register 	Value (32-bit Binary)
T0 	01010101010101010101010101010101
T1 	Unassigned
T2 	00110001001010001111111111111111

Your response

T0 01010101010101010101010101010101 T1 Unassigned T2 00110001001010001111111111111111
Our answer


This problem requires an understanding of how the CPU handles control flow operations like jump and branch commands.

Since our hardware doesn’t understand if-else statements, for loops, or iterators, one method it uses is to “jump” to a specific instruction. Most Assembly languages have a special register called the “Program Counter” or PC that contains the next instruction to process. We can manipulate the contents of the PC with Jump and Branch commands.

This particular command, JR, sets the PC equal to the contents of what is stored in the designated register, T2.

    00110001001010001111111111111111 is the 32-bit instruction in T2

From our ISA lesson, we know that the first six bits are the opcode. We can search our Instruction Manual for the string 001100 and find that the match operation is the ANDI (And Immediate) instruction. This command takes a register and an immediate value as operands and stores the result into the destination register.

An issue you may have run across was that the registers in the binary ANDI instruction are just numbers and the table we gave you references registers by their mnemonic names. To solve this problem you need to look at the Registers Table in the Quick Reference Guide to translate that register 9 is the T1 register and register 8 is the T0 register.

Once we have the two numbers:

    01010101010101010101010101010101 from T0
    00000000000000001111111111111111 as our zero-extended immediate

We can draw on our knowledge of logic gates to perform the bitwise AND of the two numbers.

The final registers, including the result in T1, is below:
Register 	Value (32-bit Binary)
T0 	01010101010101010101010101010101
T1 	00000000000000000101010101010101
T2 	00110001001010001111111111111111


As in most Assembly languages, a jump command normally also causes the next line of code to operate as the next command is being loaded into the PC. It is common practice to follow a jump or branch command with a NOP or No Operation command; in fact, if you read the Programming Notes associated with the NOP, you will see it referenced. It does exactly that- performs no operations for one cycle. The actual execution of code would go: JR -> NOP -> ANDI.
Problem 4
Free response

What is the result of the following code:

Instruction:

XOR T1, T1, T1

Register 	Value (32-bit Binary)
T1 	11011000111000111010100110001101

Your response

T1 11011000111000111010100110001101
Our answer


This instruction sets the register to zero.

The goal of the XOR, or Exclusive OR, is to return true if one, and only one, of the inputs to the gate is true.

Therefore if we XOR a value and itself it will always result in zero because it can’t be exclusive with itself. If we take a look at the truth table in the hint you can see this as well.

This method is a common way to zero out a register across all Assembly languages, particularly because it can be done in one cycle. MIPS has a dedicated hardwired zero register that can also be used but don’t be surprised if you see XOR being used just out of habit.

Register management is an important task at the hardware level and as with all things, errors can occur when overwriting data. Zeroing a register before storing a value to it ensures that the desired data is in fact stored there.

