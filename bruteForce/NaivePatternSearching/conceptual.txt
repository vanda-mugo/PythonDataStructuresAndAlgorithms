Naive Pattern Search: Conceptual

How to find a pattern within a larger body of text.

Have you ever scoured a page in a dictionary or website looking for a specific word or phrase? Checking word after word until it matches exactly what you are looking for?

This is a naive form of pattern searching!

It’s called naive because it is the simplest way to tackle the problem of finding a specific pattern (such as a word) in a text.
Naive Pattern Searching

Pattern searching requires two base components:

    A text to scan
    A pattern to search for

In our naive search, we can imagine the text being scanned as one long string of characters, one after another. The pattern is a separate, shorter string that we slide along the original text one character at a time, like a finger following letters in a book.

For each character of the original text, we count the number of following characters that match the pattern. If a disparity is found, then we move to the next letter of the text, but if the number of matching characters equals the length of the pattern, well then we found the pattern in the text!
Performance

The Naive Pattern Search is nice in its simple and intuitive approach to the common problem of finding a pattern or word in a larger body of text. However, for each character in the original text, we have to compare it to every character in the pattern one by one before moving further along in the text.

If we imagine a worst-case scenario where every character of the pattern k consistently matches all of the letters of the original text n, then it would take O(nk) comparisons. This means that the performance of the Naive Pattern Search approaches the slow O(n^2)!

The constant backtracking to the next character of the input text is the main cause of this slow performance, causing the algorithm to check the same characters many times. Better integrating the iteration of the pattern within the larger iteration of the text is the key to more optimized search algorithms, such as the Knuth–Morris–Pratt algorithm. It tracks collections of characters in the pattern called prefixes to intelligently skip through the original text after having checked if a pattern matches, thereby preventing backtracking, and getting a runtime of O(n+k).




In the Naive Pattern Search algorithm, the idea is to check whether a given pattern of length kk exists in a text of length nn by comparing each character of 
the pattern with the corresponding character of the text. We slide the pattern across the text, one character at a time, and compare the characters one by one.


Worst-Case Scenario in Naive Pattern Search

The worst-case scenario occurs when, for each possible position of the pattern in the text, there is a character-by-character match, but the pattern does not match the text at any position. This means that for each of the n−k+1n−k+1 possible starting positions in the text, we perform kk comparisons.
Worst-Case Performance Analysis

    Comparisons per starting position:
        For each starting position in the text, the algorithm checks if the entire pattern matches the substring starting at that position.
        In the worst case, we check all kk characters of the pattern at every starting position in the text.

    Number of starting positions:
        There are n−k+1n−k+1 possible starting positions in the text (from index 0 to n−kn−k).

Thus, in the worst case, the algorithm will perform k comparisons for each of the n−k+1 starting positions, leading to a total of:
(n−k+1)×k≈O(nk)

Since kk is the length of the pattern and typically considered constant in many cases, the worst-case time complexity is often simplified as O(nk)O(nk).
In the worst-case scenario:

    Every character in the text is compared with the corresponding character of the pattern. This happens for all possible starting positions of the pattern in the text.
    If the pattern contains many characters that match the text at each position (but not completely), the algorithm will waste time doing unnecessary comparisons.

Why does this lead to O(n2)O(n2) behavior in the worst case?

    If kk is nearly equal to nn (for example, k=nk=n), the algorithm essentially compares each character of the pattern to each character of the text for every starting position. This results in O(n)O(n) comparisons for each of the O(n)O(n) starting positions, leading to a total of O(n2)O(n2) comparisons.
    Even if kk is smaller than nn, the factor of kk can lead to slow performance, especially when kk is large. For very large patterns, the number of comparisons can grow quadratically with respect to the length of the text.

Example of the Worst-Case Scenario:

Consider a pattern "AAAA" and a text "AAAAAAAAAA".

    Start with the first position of the pattern in the text (index 0):
        Compare the first "A" of the pattern with the first "A" of the text (match).
        Compare the second "A" of the pattern with the second "A" of the text (match).
        Continue for the third and fourth "A" characters (match).
        Since all characters match, the pattern is matched, but this check is repeated for every subsequent position in the text.
    Repeat the process for all subsequent positions (index 1 to 6):
        For each of these positions, we perform k=4k=4 comparisons. However, since the text and pattern are all "A"s, we will continue matching until the end, only to find that the pattern doesn't match at the end of the string.

In this case, the algorithm performs O(nk)O(nk) comparisons, and if the text length is close to the pattern length, the algorithm could perform a total of O(n2)O(n2) comparisons, making it highly inefficient for large texts and patterns.
Conclusion:

The Naive Pattern Search algorithm suffers from quadratic time complexity in the worst case (O(n2)O(n2)) when the pattern and text share many similar characters, leading to excessive, unnecessary comparisons.