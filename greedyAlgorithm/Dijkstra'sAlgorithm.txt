Intro to Dijkstra's Algorithm: Conceptual
5 min

Now that we know how to properly search a graph, how can we use these skills in real life?

One of the most common applications of graph searches is to find the shortest distance between vertices. Finding this distance has a variety of applications 
such as finding the optimal route to a destination or transferring data in a computer network.

Take a look at the graph below. Finding the shortest path between vertex A and vertex E may seem easy in your brain, but telling a computer 
how to find it is a bit more complicated.



Fortunately, there is an
Preview: Docs An algorithm is a formal process used to solve a problem. They can be represented in several formats but are usually represented in pseudocode in order to communicate the process by which the algorithms solve the problems they were created to tackle.
algorithm
that computes the shortest distance from a given vertex to the rest of the vertices in a graph. This is called Dijkstra’s Algorithm.

Dijkstra’s Algorithm works as following:

    Instantiate a
    Preview: Docs A dictionary is an unordered set of (key, value) pairs. It provides a way to map pieces of data to each other, and allows for quick access to 
    values associated to keys. The syntax of a dictionary is as follows: pseudo dictionary = { key1: value1, key2: value2, key3: value3}
    dictionary
    that will eventually map vertices to their distance from the start vertex
    Assign the start vertex a distance of 0 in a min heap
    Assign every other vertex a distance of infinity in a min heap
    Remove the vertex with the smallest distance from the min heap and set that to the current vertex
    For the current vertex, consider all of its adjacent vertices and calculate the distance to them as 
    (distance to the current vertex) + (edge weight of current vertex to adjacent vertex).
    If this new distance is less than the current distance, replace the current distance.
    Repeat 4 and 5 until the heap is empty
    After the heap is empty, return the distances




Dijkstras Algorithm: Conceptual Runtime
1 min

How efficient is Dijkstra’s algorithm? Let’s break it into different parts:

    Searching through the graph
    Keeping track of distances

Just like breadth-first search and depth-first search, to search through an entire graph, in the worst case, 
we would go through all of the edges and all of the vertices resulting in a
Preview: Docs Loading link description
runtime
of O(E + V).

For Dijkstra’s, we use a min-heap to keep track of all the distances. Searching through and updating a min-heap with 
V nodes takes O(log V) because in each layer of the min-heap, we reduce the number of nodes we are looking at by a factor of 2.

In the worst case, we would update the min-heap every iteration. Since there are at most E + V iterations of Dijkstra’s and it 
takes log V to update a min-heap in the worst case, then the runtime of Dijkstra’s is O((E+V)log V).


Dijkstras Algorithm Review
<1 min

Congratulations on grasping a conceptual understanding of Dijkstra’s Algorithm!

Here’s a quick recap of what you’ve learned:

    Dijkstra’s
    Preview: Docs An algorithm is a formal process used to solve a problem. They can be represented in several formats but are usually 
    represented in pseudocode in order to communicate the process by which the algorithms solve the problems they were created to tackle.
    algorithm
    is an algorithm to find all of the shortest distances between a start vertex and the rest of the vertices in a graph.
    The algorithm works by keeping track of all the distances and updating the distances as it conducts a breadth-first search.
    Dijkstra’s algorithm runs in O((E+V)log V).

